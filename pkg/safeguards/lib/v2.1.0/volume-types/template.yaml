apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8sazurev2volumetypes
spec:
  crd:
    spec:
      names:
        kind: K8sAzureV2VolumeTypes
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          properties:
            volumes:
              type: array
              items:
                type: string
            excludedImages:
              description: >-
                Any container that uses an image that matches an entry in this list will be excluded
                from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.
                It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name)
                in order to avoid unexpectedly excluding images from an untrusted repository.
              type: array
              items:
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8sazurev2volumetypes

        import data.lib.exclude_container_image.is_excluded

        violation[{"msg": msg, "details": {}}] {
            volume_fields := {x | mounted_volumes[_][x]; x != "name"}
            field := volume_fields[_]
            not input_volume_type_allowed(field)
            msg := sprintf("The volume type %v is not allowed, pod: %v. Allowed volume types: %v", [field, input.review.object.metadata.name, input.parameters.volumes])
        }

        # * may be used to allow all volume types
        input_volume_type_allowed(_) {
            input.parameters.volumes[_] == "*"
        }

        mounted_volumes[volumes] {
            container := input_containers[_]
            not is_excluded(container)
            volumeNames := {x | x := container.volumeMounts[_].name}
            volumes := {x | x := input.review.object.spec.volumes[_]; x.name == volumeNames[_]}[_]
        }

        input_volume_type_allowed(field) {
            field == input.parameters.volumes[_]
        }

        input_containers[c] {
            c := input.review.object.spec.containers[_]
        }
        input_containers[c] {
            c := input.review.object.spec.initContainers[_]
        }
        input_containers[c] {
            c := input.review.object.spec.ephemeralContainers[_]
        }
      libs:
        - |
          package lib.exclude_container_image
          is_excluded(container) {
              exclude_images := object.get(object.get(input, "parameters", {}), "excludedImages", [])
              img := container.image
              exclusion := exclude_images[_]
              _matches_exclusion(img, exclusion)
          }
          _matches_exclusion(img, exclusion) {
              not endswith(exclusion, "*")
              exclusion == img
          }
          _matches_exclusion(img, exclusion) {
              endswith(exclusion, "*")
              prefix := trim_suffix(exclusion, "*")
              startswith(img, prefix)
          }
